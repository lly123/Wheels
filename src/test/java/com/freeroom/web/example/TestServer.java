package com.freeroom.web.example;

import com.freeroom.web.Apollo;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.GregorianCalendar;

import static org.eclipse.jetty.servlet.ServletContextHandler.SESSIONS;

public class TestServer
{
    public static void main(final String[] args) throws Exception
    {
        prepareDB();

        final Server server = new Server(8080);
        final ServletContextHandler context = new ServletContextHandler(SESSIONS);
        context.setContextPath("/");
        server.setHandler(context);

        context.addServlet(new ServletHolder(new Apollo("com.freeroom.web.example.beans")), "/*");

        server.start();
        server.join();
    }

    public static void prepareDB() throws SQLException
    {
        try(final Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:bookdb", "sa", "")) {
            final Statement statement = connection.createStatement();
            try {
                statement.executeUpdate("DROP TABLE PUBLIC.BOOK");
            } catch (Exception ignored) {}

            statement.executeUpdate(
                    "CREATE MEMORY TABLE PUBLIC.BOOK("+
                            "ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, "+
                            "ISBN INTEGER, NAME VARCHAR(50), PRICE DECIMAL(8,2), "+
                            "PUBLISHDATE DECIMAL(15,0), TAGS VARCHAR(255))");
            statement.executeUpdate(
                    "INSERT INTO PUBLIC.BOOK (ISBN, NAME, PRICE, PUBLISHDATE, TAGS) "+
                    "VALUES (1449344852, 'AngularJS', 13.83, " + getMilliseconds(2013, 4, 30) + ", '101,102,103')");
            statement.executeUpdate(
                    "INSERT INTO PUBLIC.BOOK (ISBN, NAME, PRICE, PUBLISHDATE, TAGS) "+
                    "VALUES (1449343910, 'Bootstrap', 13.83, " + getMilliseconds(2013, 5, 29) + ", '101')");
            statement.executeUpdate(
                    "INSERT INTO PUBLIC.BOOK (ISBN, NAME, PRICE, PUBLISHDATE, TAGS) "+
                    "VALUES (1449360726, 'Functional JavaScript', 15.81, " + getMilliseconds(2013, 6, 18) + ", '101,104')");
            statement.executeUpdate(
                    "INSERT INTO PUBLIC.BOOK (ISBN, NAME, PRICE, PUBLISHDATE, TAGS) "+
                    "VALUES (1449323391, 'Testable JavaScript', 19.98, " + getMilliseconds(2013, 1, 31) + ", '104')");
            statement.executeUpdate(
                    "INSERT INTO PUBLIC.BOOK (ISBN, NAME, PRICE, PUBLISHDATE, TAGS) "+
                    "VALUES (1449323073, 'Learning Node', 20.98, " + getMilliseconds(2012, 10, 10) + ", '101,102,103,104')");

            statement.close();
        }
    }

    private static long getMilliseconds(final int year, final int month, final int day)
    {
        final Calendar calendar = GregorianCalendar.getInstance();
        calendar.set(year, month - 1, day);
        return calendar.getTime().getTime();
    }
}
